{"version":3,"sources":["components/Customer.js","components/CustomerAdd.js","App.js","serviceWorker.js","index.js"],"names":["Customer","react_default","a","createElement","TableRow_default","TableCell_default","this","props","id","src","image","alt","name","birthday","gender","job","React","Component","CustomerAdd","_this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","handleFormSubmit","e","preventDefault","addCustomer","then","response","console","log","data","setState","file","userName","fileName","window","location","reload","handleFileChange","target","files","value","handleValueChange","nextState","formData","FormData","append","state","post","headers","content-type","onSubmit","type","onChange","App","customers","completed","callApi","_callee","body","regenerator_default","wrap","_context","prev","next","fetch","sent","json","abrupt","stop","progress","_this2","timer","setInterval","res","catch","err","classes","index_es","className","root","Table_default","table","TableHead_default","TableBody_default","map","c","components_Customer","key","colSpan","align","CircularProgress_default","variant","components_CustomerAdd","withStyles","theme","witdth","marginTop","spacing","unit","overflowX","minWidth","margin","Boolean","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.17fb0547.chunk.js","sourcesContent":["import React from 'react';\nimport TableRow from '@material-ui/core/TableRow';\nimport TableCell from '@material-ui/core/TableCell';\n\nclass Customer extends React.Component {\n    render() {\n        return (\n            <TableRow>\n                <TableCell>{this.props.id}</TableCell>\n                <TableCell><img src={this.props.image} alt=\"profile\"/></TableCell>\n                <TableCell>{this.props.name}</TableCell>\n                <TableCell>{this.props.birthday}</TableCell>\n                <TableCell>{this.props.gender}</TableCell>\n                <TableCell>{this.props.job}</TableCell>\n                \n            </TableRow>\n            // <CustomerProfile id={this.props.id} image={this.props.image} name={this.props.name}/>\n            // <CustomerInfo birthday={this.props.birthday} gender={this.props.gender} job={this.props.job} />\n        )   \n    }\n}\n\n// those are components to separate into two types such as profile and info\n// class CustomerProfile extends React.Component {\n//     render() {\n//         return (\n//             <div>\n//                 <img src = {this.props.image} alt=\"profile\"/>\n//                 <h2>{this.props.name}({this.props.id})</h2>\n//             </div>\n//         )\n//     }\n// }\n\n// class CustomerInfo extends React.Component {\n//     render() {\n//         return (\n//             <div>\n//                 <p>{this.props.birthday}</p>\n//                 <p>{this.props.gender}</p>\n//                 <p>{this.props.job}</p>\n//             </div>\n//         )\n//     }\n// }\n\n\nexport default Customer;","import React from 'react';\nimport { post } from 'axios';\n\nimport Table from '@material-ui/core/Table';\nimport TableHead from '@material-ui/core/TableHead';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableRow from '@material-ui/core/TableRow';\nimport TableCell from '@material-ui/core/TableCell';\n\nclass CustomerAdd extends React.Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            file: null,\n            userName: '',\n            birthday: '',\n            gender: '',\n            job: '',\n            fileName: ''\n        }\n    }\n\n    handleFormSubmit = (e) => {\n        e.preventDefault()\n        this.addCustomer()\n            .then((response) => {\n                console.log(response.data);\n            })\n        // for test to post data to server\n        this.setState({\n            file: null,\n            userName: '',\n            birthday: '',\n            gender: '',\n            job: '',\n            fileName: ''\n        })\n        window.location.reload();\n    }\n    // in html, to make function of handldeFileChange and handleValueChange\n    handleFileChange = (e) => {\n        this.setState({\n            // to change file value in state\n            // e.target.files: event가 발생한 input value의 set file value\n            file: e.target.files[0],\n            fileName: e.target.value\n\n        })\n    }\n\n    // e라는 이벤트 변수를 매개변수로 받은 뒤에,\n    handleValueChange = (e) => {\n        let nextState = {};\n        // 사용자가 입력 또는 선택한 변경된 value를 userName이라는 것으로 변경하겠다.\n        nextState[e.target.name] = e.target.value;\n        this.setState(nextState);\n    }\n\n    // to make the code for onChnage function in form html\n    addCustomer = () => {\n        const url='/api/customers';\n        const formData = new FormData();\n        formData.append('image', this.state.file)\n        formData.append('name', this.state.userName);\n        formData.append('birthday', this.state.birthday)\n        formData.append('gender', this.state.gender);\n        formData.append('job', this.state.job);\n        // 기본적으로 파일이 포함되어 있는 데이터를 서버로 전송하고자 할때는\n        // 웹 표준에 맞는 태그를 추가해줘야 한다.\n        const config = {\n            headers: {\n                //전달하고자 하는 것에 파일이 포함되어 있으면 넣어줘야 함.\n                'content-type': 'multipart/form-data'\n            }\n        }\n        // npm install --save axios \n        // post 라이브러리를 이용해서, 해당 url에 form데이터를 해당 환경설정에 맞게,\n        // 헤더를 붙여서 실제로 서버로 데이터를 보낼 수 있게 해주는 것.\n        return post(url, formData, config);\n    }\n\n    render() {\n        return (\n            <form onSubmit={this.handleFormSubmit}>\n                <h1>Add Customer</h1>\n                Profile Image: <input type=\"file\" name=\"file\" file={this.state.file} value={this.state.fileName} onChange={this.handleFileChange}/>\n                <br />\n                Name: <input type=\"text\" name=\"userName\" value={this.state.userName} onChange={this.handleValueChange}/>\n                <br />\n                Birthday: <input type=\"text\" name=\"birthday\" value={this.state.birthday} onChange={this.handleValueChange}/>\n                <br />\n                Gender: <input type=\"text\" name=\"gender\" value={this.state.gender} onChange={this.handleValueChange}/>\n                <br />\n                Job: <input type=\"text\" name=\"job\" value={this.state.job} onChange={this.handleValueChange}/>\n                <br />\n                <button type=\"submit\"> Add </button>\n            </form>\n        );\n    }\n}\n\nexport default CustomerAdd;","import React, {Component} from 'react';\n// import logo from './logo.svg';\nimport './App.css';\nimport Customer from './components/Customer';\nimport CustomerAdd from './components/CustomerAdd';\nimport Table from '@material-ui/core/Table';\nimport TableHead from '@material-ui/core/TableHead';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableRow from '@material-ui/core/TableRow';\nimport TableCell from '@material-ui/core/TableCell';\nimport { withStyles } from '@material-ui/core/styles';\nimport { Paper } from '@material-ui/core';\nimport CircularProgress from '@material-ui/core/CircularProgress';\n// import { async } from 'rxjs/internal/scheduler/async';\n\nconst styles = theme => ({\n  root: {\n    witdth: '100%',\n    marginTop: theme.spacing.unit *3,\n    overflowX: \"auto\"\n  },\n  table: {\n    minWidth: 1080\n    // 가로 길이가 1080 보다 작아지면 스크롤이 나오게 하는 css\n  },\n  progress: {\n    margin: theme.spacing.unit*2\n  }\n});\n\nclass App extends Component {\n\n  // state 는 변경될 수 있는 데이터를 명시할 때,\n  state = {\n    customers: \"\",\n    // progress bar는 0% 에서 100%까지 \n    completed: 0\n  }\n\n  componentDidMount() {\n    // 0.02초마다 프로그레스 함수가 수행될 수 있도록 해주는 것\n    this.timer = setInterval (this.progress, 20);  \n    // if you comment it, you can test progress bar easily\n    // because default customer is empty (\"\") so that data is getting\n    // the data continuosly. \n    this.callApi()\n      .then(res => this.setState({customers: res}))\n      .catch(err => console.log(err));\n  }\n\n  callApi = async() => {\n    const response = await fetch('/api/customers');\n    const body = await response.json();\n    return body;\n  }\n\n  progress = () => {\n    const { completed } = this.state;\n    this.setState( { completed: completed >= 100 ? 0 : completed + 1 });\n  }\n\n  render() {\n    // props는 변경될 수 없는 데이터를 명시할 때,\n    const { classes } = this.props; \n    return (\n      <div>\n        <Paper className={classes.root}>\n        <Table className={classes.table}>\n          <TableHead>\n            <TableRow>\n              <TableCell>Id</TableCell>\n              <TableCell>Image</TableCell>\n              <TableCell>Name</TableCell>\n              <TableCell>Birthday</TableCell>\n              <TableCell>Gender</TableCell>\n              <TableCell>Job</TableCell>\n            </TableRow>\n          </TableHead>\n          <TableBody>\n          {/* {customers.map(c => { return ( <Customer key={c.id} id={c.id} image={c.image} name={c.name} birthday={c.name} gender={c.gender} job={c.job}/> ); }) } */}\n          {this.state.customers ? this.state.customers.map(c => {\n                return ( <Customer key={c.id} id={c.id} image={c.image} name={c.name} birthday={c.birthday} gender={c.gender} job={c.job}/> );\n              }) : \n            <TableRow>\n              <TableCell colSpan=\"6\" align=\"center\">\n                <CircularProgress className={classes.progress} variant=\"determinate\" value={this.state.completed}/>\n              </TableCell>\n            </TableRow>\n          }\n          </TableBody>\n        </Table>\n        </Paper>\n        <CustomerAdd/>\n      </div>\n    );\n  }\n}\n\nexport default withStyles(styles)(App);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}